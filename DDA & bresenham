#include <graphics.h>
#include <iostream>
#include <cmath>
using namespace std;

// Class to implement DDA Line drawing algorithm
class DdaLine {
public:
    void drawLine(int x1, int y1, int x2, int y2) {
        int dx = x2 - x1;
        int dy = y2 - y1;
        int steps;

        // Determine number of steps required for the line drawing
        if (abs(dx) > abs(dy)) {
            steps = abs(dx);
        } else {
            steps = abs(dy);
        }

        float xIncrement = dx / float(steps);
        float yIncrement = dy / float(steps);

        float x = x1;
        float y = y1;

        for (int i = 0; i <= steps; i++) {
            putpixel(round(x), round(y), WHITE);
            x += xIncrement;
            y += yIncrement;
        }
    }
};

// Class to implement Bresenham's Circle Drawing algorithm
class BresenhamCircle {
public:
    void drawCircle(int xc, int yc, int r) {
        int x = 0;
        int y = r;
        int p = 3 - 2 * r;

        // Plot the initial points at 8 symmetric positions
        plotCirclePoints(xc, yc, x, y);

        while (x <= y) {
            x++;

            // Check if we need to adjust the value of y
            if (p < 0) {
                p = p + 4 * x + 6;
            } else {
                y--;
                p = p + 4 * (x - y) + 10;
            }

            // Plot the points at the 8 symmetric positions
            plotCirclePoints(xc, yc, x, y);
        }
    }

private:
    // Function to plot the points of the circle at 8 symmetric positions
    void plotCirclePoints(int xc, int yc, int x, int y) {
        putpixel(xc + x, yc + y, WHITE);
        putpixel(xc - x, yc + y, WHITE);
        putpixel(xc + x, yc - y, WHITE);
        putpixel(xc - x, yc - y, WHITE);
        putpixel(xc + y, yc + x, WHITE);
        putpixel(xc - y, yc + x, WHITE);
        putpixel(xc + y, yc - x, WHITE);
        putpixel(xc - y, yc - x, WHITE);
    }
};

int main() {
    int gdriver = DETECT, gmode;
    initgraph(&gdriver, &gmode, "");

    DdaLine line;
    BresenhamCircle circle;

    // Draw lines using DDA
    line.drawLine(100, 100, 400, 100); // Horizontal Line
    line.drawLine(100, 100, 100, 400); // Vertical Line

    // Draw a circle using Bresenham's algorithm
    circle.drawCircle(250, 250, 100); // Circle with center (250,250) and radius 100

    getch();
    closegraph();
    return 0;
}
//    command to run the code in terminal
//    gcc filename.cpp -o sample -lgraph
//    ./sample
