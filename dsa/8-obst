#include <iostream>
using namespace std;

const int MAX = 20;  
void optimalBST(double p[], int n) {
    double cost[MAX][MAX] = {0};
    int root[MAX][MAX] = {0};

    // Cost of a single key
    for (int i = 0; i < n; i++) {
        cost[i][i] = p[i];
        root[i][i] = i;
    }

    // l is chain length
    for (int l = 2; l <= n; l++) {
        for (int i = 0; i <= n - l; i++) {
            int j = i + l - 1;
            cost[i][j] = 999999; // infinity substitute

            // Sum of probabilities p[i] to p[j]
            double sum = 0;
            for (int s = i; s <= j; s++) {
                sum += p[s];
            }

            // Try all roots
            for (int r = i; r <= j; r++) {
                double c = 0;
                if (r > i) c += cost[i][r - 1];
                if (r < j) c += cost[r + 1][j];
                c += sum;

                if (c < cost[i][j]) {
                    cost[i][j] = c;
                    root[i][j] = r;
                }
            }
        }
    }

    cout << "\nMinimum cost of Optimal BST: " << cost[0][n - 1] << endl;
}

int main() {
    int n;
    double p[MAX];

    cout << "Enter number of keys: ";
    cin >> n;

    cout << "Enter access probabilities (sorted keys):\n";
    for (int i = 0; i < n; i++) {
        cout << "p[" << i + 1 << "]: ";
        cin >> p[i];
    }

    optimalBST(p, n);

    return 0;
}
