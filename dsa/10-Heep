#include <iostream>
#include <vector>
using namespace std;

// Function to heapify a max heap
void maxHeapify(vector<int>& arr, int n, int i) {
    int largest = i;     // Initialize largest as root
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    // If left child is larger than root
    if (left < n && arr[left] > arr[largest])
        largest = left;

    // If right child is larger than largest so far
    if (right < n && arr[right] > arr[largest])
        largest = right;

    // If largest is not root
    if (largest != i) {
        swap(arr[i], arr[largest]);
        maxHeapify(arr, n, largest);
    }
}

// Function to heapify a min heap
void minHeapify(vector<int>& arr, int n, int i) {
    int smallest = i;    // Initialize smallest as root
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && arr[left] < arr[smallest])
        smallest = left;

    if (right < n && arr[right] < arr[smallest])
        smallest = right;

    if (smallest != i) {
        swap(arr[i], arr[smallest]);
        minHeapify(arr, n, smallest);
    }
}

void buildMaxHeap(vector<int>& arr, int n) {
    // Start from last non-leaf node and heapify each one
    for (int i = n / 2 - 1; i >= 0; i--)
        maxHeapify(arr, n, i);
}

void buildMinHeap(vector<int>& arr, int n) {
    for (int i = n / 2 - 1; i >= 0; i--)
        minHeapify(arr, n, i);
}

int main() {
    int n;
    cout << "Enter number of students: ";
    cin >> n;

    vector<int> marks(n);
    cout << "Enter marks of " << n << " students:\n";
    for (int i = 0; i < n; ++i)
        cin >> marks[i];

    // Create copies of the array to build two heaps
    vector<int> maxHeap = marks;
    vector<int> minHeap = marks;

    buildMaxHeap(maxHeap, n);
    buildMinHeap(minHeap, n);

    cout << "\nMaximum Marks: " << maxHeap[0] << endl;
    cout << "Minimum Marks: " << minHeap[0] << endl;

    return 0;
}
