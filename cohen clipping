#include <iostream>
#include <graphics.h>
#include <math.h>
using namespace std;

// Define the clipping window boundaries
const int X_MIN = 150, X_MAX = 450, Y_MIN = 100, Y_MAX = 350;

// Define the region codes
const int INSIDE = 0;  // 0000
const int LEFT = 1;    // 0001
const int RIGHT = 2;   // 0010
const int BOTTOM = 4;  // 0100
const int TOP = 8;     // 1000

// Define a point structure
struct Point {
    int x, y;
};

// Function to compute the region code for a point
int computeCode(Point p) {
    int code = INSIDE;

    if (p.x < X_MIN) {        // to the left of the window
        code |= LEFT;
    } else if (p.x > X_MAX) { // to the right of the window
        code |= RIGHT;
    }

    if (p.y < Y_MIN) {        // below the window
        code |= BOTTOM;
    } else if (p.y > Y_MAX) { // above the window
        code |= TOP;
    }

    return code;
}

// Function to perform the line clipping using Cohen-Sutherland algorithm
void cohenSutherlandClip(Point &p1, Point &p2) {
    int code1 = computeCode(p1);
    int code2 = computeCode(p2);
    bool accept = false;

    while (true) {
        if ((code1 == 0) && (code2 == 0)) {
            // Both points are inside the window, accept the line
            accept = true;
            break;
        } else if ((code1 & code2) != 0) {
            // Both points share an outside region, reject the line
            break;
        } else {
            // Line is partially inside, calculate the intersection point
            int codeOut;
            float x, y;

            // Find the point with the non-zero code
            if (code1 != 0) {
                codeOut = code1;
            } else {
                codeOut = code2;
            }

            // Calculate the intersection point
            if (codeOut & TOP) {
                // Intersection with the top boundary
                x = p1.x + (p2.x - p1.x) * (Y_MAX - p1.y) / (p2.y - p1.y);
                y = Y_MAX;
            } else if (codeOut & BOTTOM) {
                // Intersection with the bottom boundary
                x = p1.x + (p2.x - p1.x) * (Y_MIN - p1.y) / (p2.y - p1.y);
                y = Y_MIN;
            } else if (codeOut & RIGHT) {
                // Intersection with the right boundary
                y = p1.y + (p2.y - p1.y) * (X_MAX - p1.x) / (p2.x - p1.x);
                x = X_MAX;
            } else if (codeOut & LEFT) {
                // Intersection with the left boundary
                y = p1.y + (p2.y - p1.y) * (X_MIN - p1.x) / (p2.x - p1.x);
                x = X_MIN;
            }

            // Update the point outside the window
            if (codeOut == code1) {
                p1.x = x;
                p1.y = y;
                code1 = computeCode(p1);
            } else {
                p2.x = x;
                p2.y = y;
                code2 = computeCode(p2);
            }
        }
    }

    if (accept) {
        // Draw the clipped line if it is accepted
        setcolor(GREEN);  // Set the line color to green
        line(p1.x, p1.y, p2.x, p2.y);
    } else {
        // Indicate that the line is rejected
        setcolor(RED);  // Set the line color to red
        outtextxy(200, 200, "Line is rejected!");
    }
}

void drawClippingWindow() {
    // Draw the clipping window (rectangle)
    setcolor(WHITE);
    rectangle(X_MIN, Y_MIN, X_MAX, Y_MAX);
}

int main() {
    int gd = DETECT, gm;
    Point p1, p2;

    // Initialize the graphics mode
    initgraph(&gd, &gm, "");

    // Input the coordinates of the line segment
    cout << "Enter coordinates of point 1 (x1, y1): ";
    cin >> p1.x >> p1.y;

    cout << "Enter coordinates of point 2 (x2, y2): ";
    cin >> p2.x >> p2.y;

    // Draw the clipping window
    drawClippingWindow();

    // Draw the original line in white color
    setcolor(WHITE);
    line(p1.x, p1.y, p2.x, p2.y);

    // Perform Cohen-Sutherland line clipping
    cohenSutherlandClip(p1, p2);

    // Wait for a key press before closing
    getch();
    closegraph();
    return 0;
}
